// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addTransaction = `-- name: AddTransaction :one
INSERT INTO transactions (id, executed_at, amount, sender_address, recipient_address)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, executed_at, amount, sender_address, recipient_address
`

type AddTransactionParams struct {
	ID               uuid.UUID
	ExecutedAt       time.Time
	Amount           string
	SenderAddress    uuid.UUID
	RecipientAddress uuid.UUID
}

func (q *Queries) AddTransaction(ctx context.Context, arg AddTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, addTransaction,
		arg.ID,
		arg.ExecutedAt,
		arg.Amount,
		arg.SenderAddress,
		arg.RecipientAddress,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.ExecutedAt,
		&i.Amount,
		&i.SenderAddress,
		&i.RecipientAddress,
	)
	return i, err
}

const getNLastTransactions = `-- name: GetNLastTransactions :many
SELECT id, executed_at, amount, sender_address, recipient_address FROM transactions
ORDER BY executed_at DESC
LIMIT $1
`

func (q *Queries) GetNLastTransactions(ctx context.Context, limit int32) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getNLastTransactions, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.ExecutedAt,
			&i.Amount,
			&i.SenderAddress,
			&i.RecipientAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
