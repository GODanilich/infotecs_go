// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: wallets.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const changeWalletBalance = `-- name: ChangeWalletBalance :one
UPDATE wallets
SET
    balance = $1,
    updated_at = NOW()
WHERE address = $2
RETURNING address, created_at, updated_at, balance
`

type ChangeWalletBalanceParams struct {
	Balance string
	Address uuid.UUID
}

func (q *Queries) ChangeWalletBalance(ctx context.Context, arg ChangeWalletBalanceParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, changeWalletBalance, arg.Balance, arg.Address)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
	)
	return i, err
}

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (address, created_at, updated_at, balance)
VALUES ($1, $2, $3, $4)
RETURNING address, created_at, updated_at, balance
`

type CreateWalletParams struct {
	Address   uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Balance   string
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallet,
		arg.Address,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Balance,
	)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
	)
	return i, err
}

const getWallet = `-- name: GetWallet :one
SELECT address, created_at, updated_at, balance FROM wallets WHERE address = $1
`

func (q *Queries) GetWallet(ctx context.Context, address uuid.UUID) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWallet, address)
	var i Wallet
	err := row.Scan(
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Balance,
	)
	return i, err
}

const getWalletBalance = `-- name: GetWalletBalance :one
SELECT balance FROM wallets WHERE address = $1
`

func (q *Queries) GetWalletBalance(ctx context.Context, address uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getWalletBalance, address)
	var balance string
	err := row.Scan(&balance)
	return balance, err
}

const getWallets = `-- name: GetWallets :many
SELECT address, created_at, updated_at, balance FROM wallets
`

func (q *Queries) GetWallets(ctx context.Context) ([]Wallet, error) {
	rows, err := q.db.QueryContext(ctx, getWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
